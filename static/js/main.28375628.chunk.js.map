{"version":3,"sources":["variables/variables.jsx","reducers/appReducer.jsx","components/TodoForm.jsx","components/UndoneTodo.jsx","components/DoneTodo.jsx","components/TodoList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["today","Date","toISOString","substring","initialTodoForm","id","discription","date","important","done","doneDate","appReducer","state","action","type","payload","todoForm","todoList","sort","a","b","filter","x","item","map","TodoForm","useContext","AppContext","appState","dispatch","handleSubmit","e","preventDefault","Consumer","className","onSubmit","placeholder","value","min","required","onChange","currentTarget","checked","UndoneTodo","props","deleteTodo","makeDoneTodo","key","style","color","undefined","onClick","DoneTodo","TodoList","undoneTodo","doneTodo","React","createContext","App","useReducer","didRun","useRef","useEffect","current","raw","localStorage","getItem","JSON","parse","setItem","stringify","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.28375628.chunk.js","sourcesContent":["export const today = new Date().toISOString().substring(0, 10);\r\n\r\nexport const initialTodoForm = {\r\n    id: 0,\r\n    discription: \"\",\r\n    date: today,\r\n    important: false,\r\n    done: false,\r\n    doneDate: \"\"\r\n};","import { today, initialTodoForm } from \"../variables/variables\";\r\n\r\n///zmienić id na localTimme czy cuś\r\n//uzależnić przynależność do state względem \"done\"\r\n\r\nconst appReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"RESET\":\r\n      return action.payload;\r\n    case \"ADD_DISCRIPTION\":\r\n      return {\r\n        ...state,\r\n        todoForm: { ...state.todoForm, discription: action.payload }\r\n      };\r\n\r\n    case \"ADD_DATE\":\r\n      if (action.payload >= today) {\r\n        return {\r\n          ...state,\r\n          todoForm: { ...state.todoForm, date: action.payload }\r\n        };\r\n      } else {\r\n        return state;\r\n      }\r\n    case \"ADD_IMPORTANT\":\r\n      return {\r\n        ...state,\r\n        todoForm: { ...state.todoForm, important: action.payload }\r\n      };\r\n    case \"ADD_TODO\":\r\n      return {\r\n        ...state,\r\n        todoForm: { ...initialTodoForm, id: state.todoForm.id + 1 },\r\n        todoList: [...state.todoList, action.payload].sort(\r\n          (a, b) => b.date - a.date\r\n        )\r\n      };\r\n\r\n    case \"DELETE_TODO\":\r\n      return {\r\n        ...state,\r\n        todoList: state.todoList.filter(x => x.id !== action.item.id)\r\n      };\r\n    case \"MAKEDONE_TODO\":\r\n      return {\r\n        ...state,\r\n        todoList: state.todoList.map(x =>\r\n          x.id === action.item.id\r\n            ? {\r\n                ...x,\r\n                done: true,\r\n                doneDate: today\r\n              }\r\n            : {\r\n                ...x\r\n              }\r\n        )\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default appReducer;\r\n","import React, { useContext } from \"react\";\r\nimport { AppContext } from \"../App\";\r\n\r\nconst TodoForm = () => {\r\n  const { appState, dispatch } = useContext(AppContext);\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    dispatch({\r\n      type: \"ADD_TODO\",\r\n      payload: appState.todoForm\r\n    });\r\n  };\r\n\r\n  return (\r\n    <AppContext.Consumer>\r\n      {() => (\r\n        <div className=\"app__todoForm\">\r\n          <h2>Make new todo: </h2>\r\n          <form onSubmit={handleSubmit}>\r\n            <span>Fill out the task description: </span>\r\n            <br />\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter text here ...\"\r\n              value={appState.todoForm.discription}\r\n              min=\"8\"\r\n              required\r\n              onChange={e =>\r\n                dispatch({\r\n                  type: \"ADD_DISCRIPTION\",\r\n                  payload: e.currentTarget.value\r\n                })\r\n              }\r\n            />\r\n            <br />\r\n            <span>Deadline date: </span>\r\n            <br />\r\n            <input\r\n              type=\"date\"\r\n              value={appState.todoForm.date}\r\n              onChange={e =>\r\n                dispatch({\r\n                  type: \"ADD_DATE\",\r\n                  payload: e.currentTarget.value\r\n                })\r\n              }\r\n            />\r\n            <br />\r\n            <span>Priority: </span>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={appState.todoForm.important}\r\n              onChange={e =>\r\n                dispatch({\r\n                  type: \"ADD_IMPORTANT\",\r\n                  payload: e.currentTarget.checked\r\n                })\r\n              }\r\n            />\r\n            <br />\r\n            <button type=\"submit\">Add</button>\r\n          </form>\r\n        </div>\r\n      )}\r\n    </AppContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default TodoForm;\r\n","import React, { useContext } from \"react\";\r\nimport { AppContext } from \"../App\";\r\n\r\nconst UndoneTodo = props => {\r\n  const { deleteTodo, makeDoneTodo } = useContext(AppContext);\r\n\r\n  const styleImportant = {\r\n    color: \"red\"\r\n  };\r\n\r\n  return (\r\n    <li key={props.item.id} className=\"todoList__item todoList__item--undone\">\r\n      <span\r\n        className=\"item__text\"\r\n        style={props.item.important ? styleImportant : undefined}\r\n      >\r\n        {props.item.discription}, perform until: {props.item.date}{\" \"}\r\n      </span>\r\n      <button onClick={() => makeDoneTodo(props.item)}>Done!</button>{\" \"}\r\n      <button onClick={() => deleteTodo(props.item)}>Delete</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default UndoneTodo;\r\n","import React, { useContext } from \"react\";\r\nimport { AppContext } from \"../App\";\r\n\r\nconst DoneTodo = props => {\r\n  const { deleteTodo } = useContext(AppContext);\r\n\r\n  return (\r\n    <li key={props.item.id} className=\"todoList__item todoList__item--done\">\r\n      <span className=\"item__text\">\r\n        {props.item.discription}, done: {props.item.doneDate}\r\n      </span>\r\n      <button onClick={() => deleteTodo(props.item)}>Delete</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default DoneTodo;\r\n","import React, { useContext } from \"react\";\r\nimport { AppContext } from \"../App\";\r\nimport UndoneTodo from \"./UndoneTodo\";\r\nimport DoneTodo from \"./DoneTodo\";\r\n\r\nconst TodoList = () => {\r\n  const { appState } = useContext(AppContext);\r\n  const undoneTodo = appState.todoList.filter(item => !item.done)\r\n  const doneTodo = appState.todoList.filter(item => item.done)\r\n\r\n  return (\r\n    <AppContext.Consumer>\r\n      {() => (\r\n        <div className=\"app__todoList\">\r\n          <h2>Tasks to do:</h2>\r\n          <ul>\r\n            {undoneTodo.map( item =>\r\n              <UndoneTodo item={item} />\r\n              )}\r\n          </ul>\r\n          <h2>Tasks completed:</h2>\r\n          <ul>\r\n            {doneTodo.map(\r\n              item =>  <DoneTodo item={item} />\r\n            )}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </AppContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useReducer, useEffect, useRef } from \"react\";\nimport appReducer from \"./reducers/appReducer\";\nimport TodoForm from \"./components/TodoForm\";\nimport TodoList from \"./components/TodoList\";\nimport \"./App.scss\";\n\nimport { initialTodoForm } from \"./variables/variables\";\n\nexport const AppContext = React.createContext();\n\nconst App = () => {\n  const [appState, dispatch] = useReducer(appReducer, {\n    todoForm: initialTodoForm,\n    todoList: []\n  });\n\n  const didRun = useRef(false);\n\n  useEffect(() => {\n    if (!didRun.current) {\n      const raw = localStorage.getItem(\"data\");\n      dispatch({ type: \"RESET\", payload: JSON.parse(raw) });\n      didRun.current = true;\n    }\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\"data\", JSON.stringify(appState));\n  }, [appState]);\n\n  const deleteTodo = item => {\n    dispatch({ type: \"DELETE_TODO\", item });\n  };\n\n  const makeDoneTodo = item => {\n    dispatch({ type: \"MAKEDONE_TODO\", item });\n  };\n\n  return (\n    <AppContext.Provider\n      value={{ appState, dispatch, deleteTodo, makeDoneTodo }}\n    >\n      <div className=\"App\">\n        <TodoForm />\n        <TodoList />\n      </div>\n    </AppContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}